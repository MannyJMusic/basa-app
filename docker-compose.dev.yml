services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: basa-postgres-dev
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - basa-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped

  # BASA Application (Development)
  basa-app:
    build:
      context: .
      dockerfile: Dockerfile.dev
    container_name: basa-app-dev
    ports:
      - "3000:3000"
    env_file:
      - .env.local
    environment:
      # Override DATABASE_URL to use the Docker PostgreSQL service
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      # Override NEXTAUTH_URL for Docker environment
      - NEXTAUTH_URL=${NEXTAUTH_URL}
      # Override NEXT_PUBLIC_APP_URL for Docker environment
      - NEXT_PUBLIC_APP_URL=${NEXT_PUBLIC_APP_URL}
      # Ensure we're in development mode
      - NODE_ENV=development
      # Pass PostgreSQL environment variables for database checks
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      # Mount only the source code, let Docker handle node_modules and .next
      - ./src:/app/src:delegated
      - ./public:/app/public:delegated
      - ./prisma:/app/prisma:delegated
      - ./scripts:/app/scripts:delegated
      - ./package.json:/app/package.json:delegated
      - ./pnpm-lock.yaml:/app/pnpm-lock.yaml:delegated
      - ./next.config.js:/app/next.config.js:delegated
      - ./tailwind.config.js:/app/tailwind.config.js:delegated
      - ./tsconfig.json:/app/tsconfig.json:delegated
      - ./postcss.config.js:/app/postcss.config.js:delegated
    networks:
      - basa-network
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

volumes:
  postgres_data:

networks:
  basa-network:
    driver: bridge 