services:
  # PostgreSQL Database (Production)
  postgres:
    image: postgres:15-alpine
    container_name: basa-postgres-prod
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-basa_prod}
      POSTGRES_USER: ${POSTGRES_USER:-basa_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-basa_password}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - basa-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-basa_user} -d ${POSTGRES_DB:-basa_prod}"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # BASA Application (Production)
  basa-app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: basa-app-prod
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://${POSTGRES_USER:-basa_user}:${POSTGRES_PASSWORD:-basa_password}@postgres:5432/${POSTGRES_DB:-basa_prod}
      - NEXTAUTH_URL=${NEXTAUTH_URL}
      - NEXTAUTH_SECRET=${NEXTAUTH_SECRET}
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
      - STRIPE_PUBLISHABLE_KEY=${STRIPE_PUBLISHABLE_KEY}
      - STRIPE_WEBHOOK_SECRET=${STRIPE_WEBHOOK_SECRET}
      - MAILGUN_API_KEY=${MAILGUN_API_KEY}
      - MAILGUN_DOMAIN=${MAILGUN_DOMAIN}
      - SENTRY_DSN=${SENTRY_DSN}
      - SENTRY_ORG=${SENTRY_ORG}
      - SENTRY_PROJECT=${SENTRY_PROJECT}
      - SENTRY_AUTH_TOKEN=${SENTRY_AUTH_TOKEN}
    networks:
      - basa-network
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

volumes:
  postgres_data:

networks:
  basa-network:
    driver: bridge 