name: CI/CD Pipeline

on:
  push:
    branches: [main, dev]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      skip_tests:
        description: 'Skip tests and deploy directly'
        required: false
        default: false
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Test and Build Job - Only for main branch and PRs
  test-and-build:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup pnpm
      uses: pnpm/action-setup@v2
      with:
        version: 9.12.2

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'pnpm'

    - name: Install dependencies
      run: |
        echo "Node version: $(node --version)"
        echo "PNPM version: $(pnpm --version)"
        echo "Installing dependencies..."
        pnpm install --frozen-lockfile
        echo "Dependencies installed successfully"

    - name: Setup Testcontainers Cloud
      run: |
        echo "Setting up Testcontainers Cloud..."
        
        # Check if token is available
        if [ -n "${{ secrets.TC_CLOUD_TOKEN }}" ]; then
          echo "TC_CLOUD_TOKEN=${{ secrets.TC_CLOUD_TOKEN }}" >> $GITHUB_ENV
          echo "✅ Testcontainers Cloud token is configured"
        else
          echo "⚠️  Testcontainers Cloud token is not configured"
          echo "   Tests will run using local Testcontainers (if Docker is available)"
          echo "   To use Testcontainers Cloud:"
          echo "   1. Get your token from: https://app.testcontainers.cloud/"
          echo "   2. Add it as a GitHub secret: TC_CLOUD_TOKEN"
          echo "   3. Re-run this workflow"
          echo ""
          echo "   Continuing with local Testcontainers..."
        fi

    - name: Verify Testcontainers Cloud Setup
      run: |
        echo "🔍 Verifying Testcontainers setup..."
        if [ -n "$TC_CLOUD_TOKEN" ]; then
          echo "✅ Testcontainers Cloud token is present"
          echo "🌐 Tests will use Testcontainers Cloud"
        else
          echo "⚠️  Testcontainers Cloud token is not present"
          echo "🏠 Tests will use local Testcontainers (if available)"
          echo "   Note: GitHub Actions runners may not have Docker available"
        fi
        echo "NODE_ENV: $NODE_ENV"
      env:
        TC_CLOUD_TOKEN: ${{ secrets.TC_CLOUD_TOKEN }}
        NODE_ENV: test

    - name: Setup environment variables
      run: |
        cp .env.example .env.test
        echo "NEXTAUTH_SECRET=test-secret-key" >> .env.test
        echo "NEXTAUTH_URL=http://localhost:3000" >> .env.test
        echo "NODE_ENV=test" >> .env.test

    - name: Generate Prisma client
      run: |
        echo "🔧 Generating Prisma client..."
        pnpm prisma generate
        echo "✅ Prisma client generated successfully"
      env:
        PRISMA_CLIENT_ENGINE_TYPE: binary
        PRISMA_QUERY_ENGINE_TYPE: binary

    - name: Run type check and linting
      run: |
        echo "Running type check and linting..."
        pnpm type-check
        pnpm lint
      env:
        NODE_ENV: test
        NEXTAUTH_SECRET: test-secret-key
        NEXTAUTH_URL: http://localhost:3000
        PRISMA_CLIENT_ENGINE_TYPE: binary
        PRISMA_QUERY_ENGINE_TYPE: binary

    - name: Clean Docker environment (if available)
      run: |
        echo "🧹 Cleaning Docker environment..."
        if command -v docker &> /dev/null; then
          echo "✅ Docker is available, cleaning containers and volumes..."
          docker container prune -f || echo "⚠️  Could not prune containers"
          docker volume prune -f || echo "⚠️  Could not prune volumes"
          docker system prune -f || echo "⚠️  Could not prune system"
        else
          echo "⚠️  Docker is not available on this runner"
        fi

    - name: Run comprehensive integration tests
      run: |
        echo "🧪 Starting comprehensive integration tests..."
        if [ -n "$TC_CLOUD_TOKEN" ]; then
          echo "🌐 Testcontainers Cloud enabled: YES"
          echo "📊 Running tests with Testcontainers Cloud..."
        else
          echo "🌐 Testcontainers Cloud enabled: NO"
          echo "📊 Running tests with local Testcontainers..."
          echo "   Note: This may fail if Docker is not available on the runner"
        fi
        
        # Force clean test environment
        echo "🧹 Forcing clean test environment..."
        rm -rf node_modules/.cache || true
        rm -rf .next || true
        
        pnpm test:integration
      env:
        NODE_ENV: test
        NEXTAUTH_SECRET: test-secret-key
        NEXTAUTH_URL: http://localhost:3000
        TC_CLOUD_TOKEN: ${{ secrets.TC_CLOUD_TOKEN }}
        PRISMA_CLIENT_ENGINE_TYPE: binary
        PRISMA_QUERY_ENGINE_TYPE: binary

    - name: Build application
      run: |
        echo "Building application..."
        pnpm build
      env:
        NODE_ENV: test
        NEXTAUTH_SECRET: test-secret-key
        NEXTAUTH_URL: http://localhost:3000

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-files
        path: |
          .next/
          public/
          package.json
          pnpm-lock.yaml
          prisma/
          next.config.js

  # Development Deployment - Fast deployment without tests
  deploy-dev:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/dev'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup SSH
      uses: webfactory/ssh-agent@v0.8.0
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

    - name: Add development server to known hosts
      run: |
        mkdir -p ~/.ssh
        ssh-keyscan -H ${{ secrets.DEV_SERVER_HOST }} >> ~/.ssh/known_hosts

    - name: Deploy to development server
      run: |
        echo "🚀 Starting development deployment..."
        echo "📍 Target: ${{ secrets.DEV_SERVER_HOST }}"
        echo "👤 User: ${{ secrets.DEV_SERVER_USER }}"
        
        ssh -A ${{ secrets.DEV_SERVER_USER }}@${{ secrets.DEV_SERVER_HOST }} << 'EOF'
          set -e
          echo "📁 Navigating to development directory..."
          cd /opt/basa-app-dev
          
          echo "🔧 Setting up Git..."
          # Set up Git to use HTTPS
          git remote set-url origin https://github.com/MannyJMusic/basa-app.git
          
          echo "📥 Pulling latest changes..."
          # Pull latest changes
          git fetch origin
          git reset --hard origin/dev
          
          echo "🔧 Making scripts executable..."
          # Make scripts executable
          chmod +x scripts/*.sh scripts/*.js
          
          echo "🚀 Running development deployment..."
          # Deploy
          ./scripts/deploy-dev.sh
          
          echo "✅ Development deployment completed"
        EOF

    - name: Health check development
      run: |
        echo "🔍 Starting development health check..."
        echo "🌐 Checking: ${{ secrets.DEVELOPMENT_DOMAIN }}"
        
        sleep 15
        
        for i in {1..10}; do
          echo "🔍 Health check attempt $i/10..."
          
          if timeout 5 curl -s -f "${{ secrets.DEVELOPMENT_DOMAIN }}/api/health" > /dev/null; then
            echo "✅ Development health check passed"
            exit 0
          fi
          
          if [ $i -eq 10 ]; then
            echo "❌ Development health check failed after 10 attempts"
            echo "📋 Checking container status..."
            ssh ${{ secrets.DEV_SERVER_USER }}@${{ secrets.DEV_SERVER_HOST }} "cd /opt/basa-app-dev && docker-compose -f docker-compose.dev.yml ps"
            echo "📋 Recent container logs:"
            ssh ${{ secrets.DEV_SERVER_USER }}@${{ secrets.DEV_SERVER_HOST }} "cd /opt/basa-app-dev && docker-compose -f docker-compose.dev.yml logs --tail=20"
            exit 1
          fi
          
          sleep 10
        done

  # Production Deployment
  deploy-prod:
    needs: test-and-build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-files
        path: ./

    - name: Setup SSH
      uses: webfactory/ssh-agent@v0.8.0
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

    - name: Add production server to known hosts
      run: |
        mkdir -p ~/.ssh
        ssh-keyscan -H ${{ secrets.PROD_SERVER_HOST }} >> ~/.ssh/known_hosts

    - name: Deploy to Production
      run: |
        echo "🚀 Starting production deployment..."
        echo "📍 Target: ${{ secrets.PROD_SERVER_HOST }}"
        echo "👤 User: ${{ secrets.PROD_SERVER_USER }}"
        
        # SSH into production server and run deployment
        ssh ${{ secrets.PROD_SERVER_USER }}@${{ secrets.PROD_SERVER_HOST }} << 'EOF'
          set -e
          echo "📁 Navigating to production directory..."
          cd /opt/basa-app-prod
          
          echo "🔧 Making scripts executable..."
          chmod +x scripts/*.sh 2>/dev/null || echo "⚠️  Could not make all scripts executable"
          
          echo "🔧 Fixing Prisma environment variables..."
          if [ -f "scripts/fix-production-prisma.sh" ]; then
            ./scripts/fix-production-prisma.sh
          else
            echo "⚠️  Prisma fix script not found, continuing..."
          fi
          
          echo "🚀 Running simple deployment..."
          if [ -f "scripts/deploy-simple.sh" ]; then
            ./scripts/deploy-simple.sh
          else
            echo "❌ Simple deployment script not found"
            echo "📋 Available scripts:"
            ls -la scripts/
            exit 1
          fi
          
          echo "✅ Production deployment completed"
        EOF

    - name: Health check production
      run: |
        echo "🚀 Starting efficient production health check..."
        echo "🌐 Checking: ${{ secrets.PRODUCTION_DOMAIN }}"
        
        # Quick initial check after 10 seconds
        echo "⏳ Initial check in 10 seconds..."
        sleep 10
        
        # Progressive health check with shorter intervals
        for i in {1..20}; do
          echo "🔍 Health check attempt $i/20..."
          
          # Try to connect with timeout
          if timeout 5 curl -s -f "${{ secrets.PRODUCTION_DOMAIN }}/api/health" > /dev/null; then
            echo "✅ Production health check passed on attempt $i!"
            exit 0
          else
            echo "❌ Health check failed on attempt $i"
            
            # Show progress every 5 attempts
            if [ $((i % 5)) -eq 0 ]; then
              echo "📊 Progress: $i/20 attempts completed"
              echo "🔍 Checking container status..."
              ssh ${{ secrets.PROD_SERVER_USER }}@${{ secrets.PROD_SERVER_HOST }} "cd /opt/basa-app-prod && docker-compose -f docker-compose.prod.yml ps"
            fi
            
            # Shorter intervals: 5 seconds for first 10 attempts, then 10 seconds
            if [ $i -lt 10 ]; then
              sleep 5
            else
              sleep 10
            fi
          fi
        done
        
        echo "❌ Health check failed after 20 attempts"
        echo "📋 Final container status:"
        ssh ${{ secrets.PROD_SERVER_USER }}@${{ secrets.PROD_SERVER_HOST }} "cd /opt/basa-app-prod && docker-compose -f docker-compose.prod.yml ps"
        echo "📋 Recent container logs:"
        ssh ${{ secrets.PROD_SERVER_USER }}@${{ secrets.PROD_SERVER_HOST }} "cd /opt/basa-app-prod && docker-compose -f docker-compose.prod.yml logs --tail=50"
        exit 1

    - name: Notify deployment success
      if: success()
      run: |
        echo "Production deployment successful!"
        # Add notification logic here (Slack, email, etc.)

    - name: Rollback on failure
      if: failure()
      run: |
        echo "🔄 Rolling back production deployment..."
        ssh ${{ secrets.PROD_SERVER_USER }}@${{ secrets.PROD_SERVER_HOST }} << 'EOF'
          cd /opt/basa-app-prod
          echo "Rolling back to previous version..."
          docker-compose -f docker-compose.prod.yml --env-file .env.production down
          git reset --hard HEAD~1
          docker-compose -f docker-compose.prod.yml --env-file .env.production up -d --build
          echo "Rollback completed"
        EOF

  # Direct Production Deployment (Skip Tests)
  deploy-prod-direct:
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'workflow_dispatch' && inputs.skip_tests == true) ||
      (github.event_name == 'push' && github.ref == 'refs/heads/main' && contains(github.event.head_commit.message, '[skip-tests]'))
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup pnpm
      uses: pnpm/action-setup@v2
      with:
        version: 9.12.2

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'pnpm'

    - name: Install dependencies
      run: |
        echo "Node version: $(node --version)"
        echo "PNPM version: $(pnpm --version)"
        echo "Installing dependencies..."
        pnpm install --frozen-lockfile
        echo "Dependencies installed successfully"

    - name: Generate Prisma client
      run: pnpm prisma generate
      env:
        PRISMA_CLIENT_ENGINE_TYPE: binary
        PRISMA_QUERY_ENGINE_TYPE: binary

    - name: Build application
      run: |
        echo "Building application..."
        pnpm build
      env:
        NODE_ENV: production
        NEXTAUTH_SECRET: ${{ secrets.NEXTAUTH_SECRET }}
        NEXTAUTH_URL: ${{ secrets.NEXTAUTH_URL }}

    - name: Setup SSH
      uses: webfactory/ssh-agent@v0.8.0
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

    - name: Add server to known hosts
      run: |
        mkdir -p ~/.ssh
        ssh-keyscan -H ${{ secrets.PROD_SERVER_HOST }} >> ~/.ssh/known_hosts

    - name: Deploy to Production
      run: |
        echo "🚀 Starting direct production deployment (tests skipped)..."
        
        # SSH into production server and run deployment
        ssh ${{ secrets.PROD_SERVER_USER }}@${{ secrets.PROD_SERVER_HOST }} << 'EOF'
          set -e
          echo "📁 Navigating to production directory..."
          cd /opt/basa-app-prod
          
          echo "🔧 Making scripts executable..."
          chmod +x scripts/*.sh 2>/dev/null || echo "⚠️  Could not make all scripts executable"
          
          echo "🔧 Fixing Prisma environment variables..."
          if [ -f "scripts/fix-production-prisma.sh" ]; then
            ./scripts/fix-production-prisma.sh
          else
            echo "⚠️  Prisma fix script not found, continuing..."
          fi
          
          echo "🚀 Running simple deployment..."
          if [ -f "scripts/deploy-simple.sh" ]; then
            ./scripts/deploy-simple.sh
          else
            echo "❌ Simple deployment script not found"
            echo "📋 Available scripts:"
            ls -la scripts/
            exit 1
          fi
        EOF

    - name: Health check production
      run: |
        echo "🚀 Starting efficient health check..."
        
        # Quick initial check after 10 seconds
        echo "⏳ Initial check in 10 seconds..."
        sleep 10
        
        # Progressive health check with shorter intervals
        for i in {1..20}; do
          echo "🔍 Health check attempt $i/20..."
          
          # Try to connect with timeout
          if timeout 5 curl -s -f "https://app.businessassociationsa.com/api/health" > /dev/null; then
            echo "✅ Health check passed on attempt $i!"
            exit 0
          else
            echo "❌ Health check failed on attempt $i"
            
            # Show progress every 5 attempts
            if [ $((i % 5)) -eq 0 ]; then
              echo "📊 Progress: $i/20 attempts completed"
              echo "🔍 Checking container status..."
              ssh ${{ secrets.PROD_SERVER_USER }}@${{ secrets.PROD_SERVER_HOST }} "cd /opt/basa-app-prod && docker-compose -f docker-compose.prod.yml ps"
            fi
            
            # Shorter intervals: 5 seconds for first 10 attempts, then 10 seconds
            if [ $i -lt 10 ]; then
              sleep 5
            else
              sleep 10
            fi
          fi
        done
        
        echo "❌ Health check failed after 20 attempts"
        echo "📋 Final container status:"
        ssh ${{ secrets.PROD_SERVER_USER }}@${{ secrets.PROD_SERVER_HOST }} "cd /opt/basa-app-prod && docker-compose -f docker-compose.prod.yml ps"
        echo "📋 Recent container logs:"
        ssh ${{ secrets.PROD_SERVER_USER }}@${{ secrets.PROD_SERVER_HOST }} "cd /opt/basa-app-prod && docker-compose -f docker-compose.prod.yml logs --tail=50"
        exit 1

    - name: Notify deployment success
      if: success()
      run: |
        echo "Production deployment successful!"
        # Add notification logic here (Slack, email, etc.)

    - name: Rollback on failure
      if: failure()
      run: |
        ssh ${{ secrets.PROD_SERVER_USER }}@${{ secrets.PROD_SERVER_HOST }} << 'EOF'
          cd /opt/basa-app-prod
          echo "Rolling back to previous version..."
          docker-compose -f docker-compose.prod.yml --env-file .env.production down
          git reset --hard HEAD~1
          docker-compose -f docker-compose.prod.yml --env-file .env.production up -d --build
          echo "Rollback completed"
        EOF 