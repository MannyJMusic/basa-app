name: CI/CD Pipeline

on:
  push:
    branches: [main, dev]
  pull_request:
    branches: [main]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Test and Build Job - Only for main branch and PRs
  test-and-build:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup pnpm
      uses: pnpm/action-setup@v2
      with:
        version: 9.12.2

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'pnpm'

    - name: Install dependencies
      run: |
        echo "Node version: $(node --version)"
        echo "PNPM version: $(pnpm --version)"
        echo "Installing dependencies..."
        pnpm install --frozen-lockfile
        echo "Dependencies installed successfully"

    - name: Setup Testcontainers Cloud
      run: |
        echo "Setting up Testcontainers Cloud..."
        
        # Check if token is available
        if [ -n "${{ secrets.TC_CLOUD_TOKEN }}" ]; then
          echo "TC_CLOUD_TOKEN=${{ secrets.TC_CLOUD_TOKEN }}" >> $GITHUB_ENV
          echo "✅ Testcontainers Cloud token is configured"
        else
          echo "⚠️  Testcontainers Cloud token is not configured"
          echo "   Tests will run using local Testcontainers (if Docker is available)"
          echo "   To use Testcontainers Cloud:"
          echo "   1. Get your token from: https://app.testcontainers.cloud/"
          echo "   2. Add it as a GitHub secret: TC_CLOUD_TOKEN"
          echo "   3. Re-run this workflow"
          echo ""
          echo "   Continuing with local Testcontainers..."
        fi

    - name: Verify Testcontainers Cloud Setup
      run: |
        echo "🔍 Verifying Testcontainers setup..."
        if [ -n "$TC_CLOUD_TOKEN" ]; then
          echo "✅ Testcontainers Cloud token is present"
          echo "🌐 Tests will use Testcontainers Cloud"
        else
          echo "⚠️  Testcontainers Cloud token is not present"
          echo "🏠 Tests will use local Testcontainers (if available)"
          echo "   Note: GitHub Actions runners may not have Docker available"
        fi
        echo "NODE_ENV: $NODE_ENV"
      env:
        TC_CLOUD_TOKEN: ${{ secrets.TC_CLOUD_TOKEN }}
        NODE_ENV: test

    - name: Setup environment variables
      run: |
        cp .env.example .env.test
        echo "NEXTAUTH_SECRET=test-secret-key" >> .env.test
        echo "NEXTAUTH_URL=http://localhost:3000" >> .env.test
        echo "NODE_ENV=test" >> .env.test

    - name: Generate Prisma client
      run: pnpm prisma generate
      env:
        PRISMA_CLIENT_ENGINE_TYPE: binary
        PRISMA_QUERY_ENGINE_TYPE: binary

    - name: Run type check and linting
      run: |
        echo "Running type check and linting..."
        pnpm type-check
        pnpm lint
      env:
        NODE_ENV: test
        NEXTAUTH_SECRET: test-secret-key
        NEXTAUTH_URL: http://localhost:3000
        PRISMA_CLIENT_ENGINE_TYPE: binary
        PRISMA_QUERY_ENGINE_TYPE: binary

    - name: Run comprehensive integration tests
      run: |
        echo "🧪 Starting comprehensive integration tests..."
        if [ -n "$TC_CLOUD_TOKEN" ]; then
          echo "🌐 Testcontainers Cloud enabled: YES"
          echo "📊 Running tests with Testcontainers Cloud..."
        else
          echo "🌐 Testcontainers Cloud enabled: NO"
          echo "📊 Running tests with local Testcontainers..."
          echo "   Note: This may fail if Docker is not available on the runner"
        fi
        pnpm test:integration
      env:
        NODE_ENV: test
        NEXTAUTH_SECRET: test-secret-key
        NEXTAUTH_URL: http://localhost:3000
        TC_CLOUD_TOKEN: ${{ secrets.TC_CLOUD_TOKEN }}
        PRISMA_CLIENT_ENGINE_TYPE: binary
        PRISMA_QUERY_ENGINE_TYPE: binary

    - name: Build application
      run: |
        echo "Building application..."
        pnpm build
      env:
        NODE_ENV: test
        NEXTAUTH_SECRET: test-secret-key
        NEXTAUTH_URL: http://localhost:3000

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-files
        path: |
          .next/
          public/
          package.json
          pnpm-lock.yaml
          prisma/
          next.config.js

  # Development Deployment - Fast deployment without tests
  deploy-dev:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/dev'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup SSH
      uses: webfactory/ssh-agent@v0.8.0
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

    - name: Add server to known hosts
      run: |
        mkdir -p ~/.ssh
        ssh-keyscan -H ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts

    - name: Deploy to development server
      run: |
        ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} << 'EOF'
          cd /opt/basa-app-dev
          
          # Fix Git ownership issue
          echo "Fixing Git ownership..."
          git config --global --add safe.directory /opt/basa-app-dev
          
          # Handle divergent branches and pull latest changes
          echo "Pulling latest changes..."
          git fetch origin
          git reset --hard origin/dev
          
          # Make scripts executable
          echo "Making scripts executable..."
          chmod +x scripts/*.sh
          chmod +x scripts/*.js
          
          # Verify script exists
          echo "Current user: $(whoami)"
          echo "Current directory: $(pwd)"
          echo "Checking if deploy script exists..."
          ls -la scripts/deploy-dev.sh
          
          # Run system test if available (with error handling)
          if [ -f "scripts/check-deployment.sh" ]; then
            echo "Running deployment check..."
            if ./scripts/check-deployment.sh; then
              echo "Deployment check passed"
            else
              echo "Deployment check failed, but continuing with deployment..."
            fi
          else
            echo "Deployment check script not found, skipping..."
          fi
          
          # Deploy
          echo "Deploying development version..."
          ./scripts/deploy-dev.sh
          echo "Development deployment completed"
        EOF

    - name: Health check development
      run: |
        echo "🚀 Starting efficient health check..."
        
        # Quick initial check after 10 seconds
        echo "⏳ Initial check in 10 seconds..."
        sleep 10
        
        # Progressive health check with shorter intervals
        for i in {1..20}; do
          echo "🔍 Health check attempt $i/20..."
          
          # Try to connect with timeout
          if timeout 5 curl -s -f "http://${{ secrets.SERVER_HOST }}:3001/api/health" > /dev/null; then
            echo "✅ Health check passed on attempt $i!"
            exit 0
          else
            echo "❌ Health check failed on attempt $i"
            
            # Show progress every 5 attempts
            if [ $((i % 5)) -eq 0 ]; then
              echo "📊 Progress: $i/20 attempts completed"
              echo "🔍 Checking container status..."
              ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} "cd /opt/basa-app-dev && docker-compose -f docker-compose.dev.yml ps"
            fi
            
            # Shorter intervals: 5 seconds for first 10 attempts, then 10 seconds
            if [ $i -lt 10 ]; then
              sleep 5
            else
              sleep 10
            fi
          fi
        done
        
        echo "❌ Health check failed after 20 attempts"
        echo "📋 Final container status:"
        ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} "cd /opt/basa-app-dev && docker-compose -f docker-compose.dev.yml ps"
        echo "📋 Recent container logs:"
        ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} "cd /opt/basa-app-dev && docker-compose -f docker-compose.dev.yml logs --tail=50"
        exit 1

  # Production Deployment
  deploy-prod:
    needs: test-and-build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-files
        path: ./

    - name: Setup SSH
      uses: webfactory/ssh-agent@v0.8.0
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

    - name: Add server to known hosts
      run: |
        mkdir -p ~/.ssh
        ssh-keyscan -H ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts

    - name: Deploy to Production
      run: |
        echo "🚀 Starting production deployment..."
        
        # SSH into production server and run deployment
                  ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} << 'EOF'
          set -e
          echo "📁 Navigating to production directory..."
          cd /opt/basa-app-prod
          
          echo "🔧 Fixing Git permissions (non-sudo approach)..."
          # Try to fix Git permissions without sudo
          if [ -w ".git" ]; then
            echo "📝 Git directory is writable, proceeding with fixes..."
            git config --global --add safe.directory "/opt/basa-app-prod"
            chmod -R 755 .git 2>/dev/null || echo "⚠️  Could not change .git permissions"
            chmod -R 755 . 2>/dev/null || echo "⚠️  Could not change file permissions"
          else
            echo "⚠️  Git directory not writable, attempting with sudo..."
            # Try sudo with error handling
            if sudo -n chown -R $USER:$USER .git 2>/dev/null; then
              sudo chmod -R 755 .git
              sudo chown -R $USER:$USER .
              sudo chmod -R 755 .
              echo "✅ Git permissions fixed with sudo"
            else
              echo "⚠️  Cannot use sudo - attempting alternative fixes..."
              git config --global --add safe.directory "/opt/basa-app-prod"
              echo "📝 Set Git safe directory configuration"
            fi
          fi
          
          echo "📥 Pulling latest changes..."
          git fetch origin
          git reset --hard origin/main
          
          echo "🔧 Making scripts executable..."
          chmod +x scripts/*.sh 2>/dev/null || echo "⚠️  Could not make scripts executable"
          
          echo "🚀 Running deployment..."
          ./scripts/deploy-prod.sh
        EOF

    - name: Health check production
      run: |
        echo "🚀 Starting efficient health check..."
        
        # Quick initial check after 10 seconds
        echo "⏳ Initial check in 10 seconds..."
        sleep 10
        
        # Progressive health check with shorter intervals
        for i in {1..20}; do
          echo "🔍 Health check attempt $i/20..."
          
          # Try to connect with timeout
          if timeout 5 curl -s -f "https://app.businessassociationsa.com/api/health" > /dev/null; then
            echo "✅ Health check passed on attempt $i!"
            exit 0
          else
            echo "❌ Health check failed on attempt $i"
            
            # Show progress every 5 attempts
            if [ $((i % 5)) -eq 0 ]; then
              echo "📊 Progress: $i/20 attempts completed"
              echo "🔍 Checking container status..."
              ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} "cd /opt/basa-app-prod && docker-compose -f docker-compose.prod.yml ps"
            fi
            
            # Shorter intervals: 5 seconds for first 10 attempts, then 10 seconds
            if [ $i -lt 10 ]; then
              sleep 5
            else
              sleep 10
            fi
          fi
        done
        
        echo "❌ Health check failed after 20 attempts"
        echo "📋 Final container status:"
        ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} "cd /opt/basa-app-prod && docker-compose -f docker-compose.prod.yml ps"
        echo "📋 Recent container logs:"
        ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} "cd /opt/basa-app-prod && docker-compose -f docker-compose.prod.yml logs --tail=50"
        exit 1

    - name: Notify deployment success
      if: success()
      run: |
        echo "Production deployment successful!"
        # Add notification logic here (Slack, email, etc.)

    - name: Rollback on failure
      if: failure()
      run: |
        ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} << 'EOF'
          cd /opt/basa-app-prod
          echo "Rolling back to previous version..."
          docker-compose -f docker-compose.prod.yml --env-file .env.production down
          git reset --hard HEAD~1
          docker-compose -f docker-compose.prod.yml --env-file .env.production up -d --build
          echo "Rollback completed"
        EOF 