datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  firstName     String?
  lastName      String?
  hashedPassword String?
  role          String    @default("MEMBER")
  isActive      Boolean   @default(true)
  lastLogin     DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  member        Member?
  auditLogs     AuditLog[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model AuditLog {
  id         String   @id @default(cuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  action     String
  entityType String
  entityId   String
  oldValues  Json?
  newValues  Json?
  timestamp  DateTime @default(now())
  ipAddress  String?
  userAgent  String?
}

model Member {
  id                  String    @id @default(cuid())
  userId              String    @unique
  user                User      @relation(fields: [userId], references: [id])

  businessName        String?
  businessType        String?
  industry            String[]
  ein                 String?   @unique
  yearEstablished     Int?
  numberOfEmployees   String?
  annualRevenue       String?
  businessEmail       String?
  businessPhone       String?
  businessAddress     String?
  city                String?
  state               String?
  zipCode             String?
  website             String?
  membershipTier      MembershipTier?
  membershipStatus    Status    @default(ACTIVE)
  joinedAt            DateTime  @default(now())
  renewalDate         DateTime?
  stripeCustomerId    String?   @unique
  subscriptionId      String?   @unique
  logo                String?
  coverImage          String?
  description         String?   @db.Text
  tagline             String?
  specialties         String[]
  certifications      String[]
  linkedin            String?
  facebook            String?
  instagram           String?
  twitter             String?
  youtube             String?
  showInDirectory     Boolean   @default(true)
  allowContact        Boolean   @default(true)
  showAddress         Boolean   @default(false)
  resources           Resource[]
  sponsorships        Sponsorship[]
  referralsGiven      Referral[] @relation("referrer")
  referralsReceived   Referral[] @relation("referred")
  @@index([businessType, membershipStatus])
  @@index([industry])
}

enum MembershipTier {
  BASIC
  PREMIUM
  VIP
}

enum Status {
  ACTIVE
  INACTIVE
  SUSPENDED
}

model Resource {
  id        String   @id @default(cuid())
  memberId  String
  member    Member   @relation(fields: [memberId], references: [id])
}

model Sponsorship {
  id        String   @id @default(cuid())
  memberId  String
  member    Member   @relation(fields: [memberId], references: [id])
}

model Referral {
  id         String   @id @default(cuid())
  referrerId String
  referredId String
  referrer   Member   @relation("referrer", fields: [referrerId], references: [id])
  referred   Member   @relation("referred", fields: [referredId], references: [id])
} 